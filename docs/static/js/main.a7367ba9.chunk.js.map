{"version":3,"sources":["Components/AddCategori.js","Components/GifGridItem.js","Helpers/GetGif.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","GifGridItem","url","title","id","className","src","alt","ropTypes","PropTypes","func","isRequired","propsTypes","string","number","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"oNAIe,SAASA,EAAT,GAAsC,IAAhBC,EAAe,EAAfA,cAAe,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAqBhD,OAEI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAU,IAI3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBAAOO,KAAK,OACZC,MAAQT,EACRU,SAtBkB,SAACP,GACvBQ,QAAQC,IAAIT,GACZF,EAAcE,EAAEU,OAAOJ,YCPhB,SAASK,EAAT,GACd,IADqCC,EACtC,EADsCA,IAAKC,EAC3C,EAD2CA,MAC3C,EADkDC,GAG9C,OACA,mCAEQ,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKJ,EAAKK,IAAKJ,IACpB,4BAAIA,SD0BpBnB,EAAYwB,SAAW,CACnBvB,cAAcwB,IAAUC,KAAKC,YCnBjCV,EAAYW,WAAa,CACrBV,IAAIO,IAAUI,OAAOF,WACrBP,GAAGK,IAAUK,OAAOH,WACpBR,MAAMM,IAAUI,OAAOF,Y,2BCrBdI,EAAM,uCAAG,WAAQC,GAAR,qBAAAC,EAAA,4DAEF,mCACVf,EAHY,iDAGoCgB,UAAUF,GAH9C,6BAEF,oCAGhBlB,QAAQC,IAAIG,GALM,SAOCiB,MAAMjB,GAPP,cAOZkB,EAPY,gBAQCA,EAAKC,OARN,cAQZC,EARY,OAUlBxB,QAAQC,IAAIuB,EAAKA,MAEXC,EAAOD,EAAKA,KAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC/B,MAAM,CACFrB,GAAGqB,EAAIrB,GACPD,MAAMsB,EAAItB,MACVD,IAAG,UAACuB,EAAIC,cAAL,aAAC,EAAYC,iBAAiBzB,QAGzCJ,QAAQC,IAAIwB,GAnBM,kBAoBXA,GApBW,4CAAH,sDCIJ,SAASK,EAAT,GAA6B,IAAXZ,EAAU,EAAVA,SAAU,ECFZ,SAAEA,GAChC,IAAD,EAC6B9B,mBAAS,CAC/BoC,KAAK,GACLO,SAAQ,IAHf,mBACUC,EADV,KACiBC,EADjB,KAyBI,OAnBAC,qBAAU,WACNjB,EAAOC,GACFiB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLT,KAAKY,EACLL,SAAQ,MAGd,UAMX,CAAEb,IAGEc,EDrBiBM,CAAapB,GAA9BM,EAHgC,EAGhCA,KAAMO,EAH0B,EAG1BA,QAab,OAEI,qCAEI,oBAAIxB,UAAU,oCAAd,SAAoDwB,EAAO,mBAAeb,GAAW,6BAAMA,MAC3F,qBAAKX,UAAU,YAAf,SAGQiB,EAAKE,KAAK,SAAAa,GACN,OAAO,cAACpC,EAAD,CAA6BG,GAAIiC,EAAMjC,GAAID,MAAOkC,EAAMlC,MAAOD,IAAKmC,EAAMnC,KAAvDmC,EAAMjC,YE3BzC,SAAUkC,IAAgB,IAAD,EAEApD,mBAAS,CAAC,cAFV,mBAE7BqD,EAF6B,KAEjBtD,EAFiB,KAKpC,OACI,qCACE,4CACA,uBACA,cAACD,EAAD,CAAaC,cAAgBA,IAC7B,6BAEEsD,EAAWf,KAAI,SAAAgB,GAAG,OAAI,cAACZ,EAAD,CAAmBZ,SAAWwB,GAAhBA,W,MCRhDC,IAASC,OAAO,cAACJ,EAAD,IAAiBK,SAASC,eAAe,W","file":"static/js/main.a7367ba9.chunk.js","sourcesContent":["\r\nimport React, {useState}  from \"react\"\r\nimport PropTypes  from \"prop-types\"\r\n\r\nexport default function AddCategory({setCategories}){\r\n\r\n    const  [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) =>{\r\n        console.log(e)\r\n        setInputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(inputValue.trim().length  > 2){\r\n\r\n            //llamado setCategories como callback no necesitamos pasar las categorias\r\n            //cats valor actual  => nuevo valor\r\n            setCategories(cats => [inputValue, ...cats ])\r\n            setInputValue('')\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n       \r\n        <form onSubmit={ handleSubmit }>\r\n            <input type=\"text\" \r\n            value={ inputValue} \r\n            onChange= {handleInputChange}/>\r\n        </form>\r\n      \r\n    )\r\n\r\n}\r\n\r\nAddCategory.ropTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","import React  from \"react\"\r\nimport PropTypes  from \"prop-types\"\r\n\r\nexport default function GifGridItem ({url, title, id})\r\n{\r\n\r\n    return(\r\n    <>\r\n            \r\n            <div className=\"card animate__animated animate__fadeIn\">\r\n                <img src={url} alt={title} />\r\n                <p>{title}</p>\r\n            </div>\r\n            \r\n    </>\r\n\r\n    )\r\n}\r\n\r\nGifGridItem.propsTypes = {\r\n    url:PropTypes.string.isRequired,\r\n    id:PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n}","\r\nexport const getGif = async ( category ) => {\r\n   \r\n    const api_key = 'jXj89Vj2vGWUawJwfiIrNacH5UKL4cHA'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${api_key}`\r\n  \r\n    console.log(url)\r\n  \r\n    const resp = await fetch(url)\r\n    const data = await resp.json()\r\n   \r\n    console.log(data.data)\r\n    \r\n    const gifs = data.data.map( img => {\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    return gifs;\r\n}","\r\nimport GifGridItem from './GifGridItem'\r\n\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs'\r\n\r\nexport default function GifGrid({category}){\r\n\r\n    \r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n    //const [images, setImages] = useState([]);\r\n    // useEffect(() => {\r\n      \r\n    //     getGif(category)\r\n    //     .then(setImages);\r\n        \r\n    //     return () => {\r\n    //         //CLEAN\r\n    //     };\r\n    // }, [category]);\r\n\r\n    return (\r\n\r\n        <>\r\n            \r\n            <h4 className=\"animate__animated animate__fadeIn\">{ loading ? `Cargando ${category}`:<h3>{ category}</h3>}</h4>\r\n            <div className=\"card-grid\">\r\n            \r\n                {\r\n                    data.map( image => {\r\n                        return <GifGridItem  key={image.id} id={image.id} title={image.title} url={image.url} />\r\n                    })\r\n                }\r\n            </div>  \r\n        </>\r\n    )\r\n} \r\n\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGif } from \"../Helpers/GetGif\";\r\n\r\n export const  useFetchGifs  = ( category )  =>\r\n{\r\n   const [state, setState] = useState({\r\n       data:[],\r\n       loading:true\r\n   })\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then(imgs => {\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data:imgs, \r\n                        loading:false\r\n                    })\r\n\r\n                },3000)\r\n                \r\n\r\n            })\r\n            //.then(imgs => setImages(imgs) )\r\n    \r\n    }, [ category ]);\r\n\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./Components/AddCategori\";\r\nimport GifGrid from \"./Components/GifGrid\";\r\nexport default function  GifExpertApp (){\r\n\r\n    const [categories, setCategories] = useState(['Star Wars']);\r\n    \r\n\r\n    return (\r\n        <>\r\n          <h2>Gifexpert </h2>\r\n          <hr />\r\n          <AddCategory setCategories= {setCategories} />\r\n          <ol>\r\n          {\r\n            categories.map(cat => <GifGrid key={cat} category= {cat}/>)\r\n          }\r\n          </ol>\r\n        </>\r\n    )\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n//jXj89Vj2vGWUawJwfiIrNacH5UKL4cHA\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}